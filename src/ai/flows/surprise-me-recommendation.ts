// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Flow for generating a surprise anime/manga recommendation based on user profile, mood, and recent interactions.
 *
 * - surpriseMeRecommendation - A function that returns a surprise anime or manga recommendation.
 * - SurpriseMeRecommendationInput - The input type for the surpriseMeRecommendation function.
 * - SurpriseMeRecommendationOutput - The return type for the surpriseMeRecommendation function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import {Anime, getAnimes} from '@/services/anime';
import {Manga, getMangas} from '@/services/manga';

const SurpriseMeRecommendationInputSchema = z.object({
  userProfile: z
    .string()
    .describe('A description of the user profile and their preferences.'),
  mood: z.string().describe('The current mood of the user.'),
  recentInteractions: z
    .string()
    .describe('A summary of the user recent interactions with the app.'),
});
export type SurpriseMeRecommendationInput = z.infer<typeof SurpriseMeRecommendationInputSchema>;

const SurpriseMeRecommendationOutputSchema = z.object({
  type: z.enum(['anime', 'manga']).describe('The type of recommendation.'),
  title: z.string().describe('The title of the recommended anime or manga.'),
  description: z.string().describe('A brief description of the recommendation.'),
  imageUrl: z.string().describe('The url of the recommended content image.'),
});
export type SurpriseMeRecommendationOutput = z.infer<typeof SurpriseMeRecommendationOutputSchema>;

export async function surpriseMeRecommendation(input: SurpriseMeRecommendationInput): Promise<SurpriseMeRecommendationOutput> {
  return surpriseMeRecommendationFlow(input);
}

const surpriseMeRecommendationPrompt = ai.definePrompt({
  name: 'surpriseMeRecommendationPrompt',
  input: {
    schema: z.object({
      userProfile: z
        .string()
        .describe('A description of the user profile and their preferences.'),
      mood: z.string().describe('The current mood of the user.'),
      recentInteractions: z
        .string()
        .describe('A summary of the user recent interactions with the app.'),
    }),
  },
  output: {
    schema: z.object({
      type: z.enum(['anime', 'manga']).describe('The type of recommendation.'),
      title: z.string().describe('The title of the recommended anime or manga.'),
      description: z.string().describe('A brief description of the recommendation.'),
      imageUrl: z.string().describe('The url of the recommended content image.'),
    }),
  },
  prompt: `You are Nami, an AI assistant that provides anime and manga recommendations. Based on the user's profile, mood, and recent interactions, provide a single surprise recommendation.

User Profile: {{{userProfile}}}
Mood: {{{mood}}}
Recent Interactions: {{{recentInteractions}}}

Consider the user's profile, mood, and recent interactions to provide a recommendation that they might not usually pick, but would still enjoy. Select either anime or manga for the user, and provide a recommendation. Be sure to include an appropriate image URL.

Ensure the output matches the specified schema.  `, // Ensure output matches schema.
});

const surpriseMeRecommendationFlow = ai.defineFlow<
  typeof SurpriseMeRecommendationInputSchema,
  typeof SurpriseMeRecommendationOutputSchema
>(
  {
    name: 'surpriseMeRecommendationFlow',
    inputSchema: SurpriseMeRecommendationInputSchema,
    outputSchema: SurpriseMeRecommendationOutputSchema,
  },
  async input => {
    // Call the prompt to get the initial recommendation.
    const {output} = await surpriseMeRecommendationPrompt(input);

    return output!;
  }
);
