// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides anime and manga recommendations based on the user's current mood, watch history, and profile activity.
 *
 * - getMoodBasedRecommendations - A function that returns a list of anime and manga recommendations based on mood.
 * - MoodBasedRecommendationsInput - The input type for the getMoodBasedRecommendations function.
 * - MoodBasedRecommendationsOutput - The return type for the getMoodBasedRecommendations function.
 */

import {ai} from '@/ai/ai-instance';
import {Anime} from '@/services/anime';
import {Manga} from '@/services/manga';
import {z} from 'genkit';

const MoodBasedRecommendationsInputSchema = z.object({
  mood: z.string().describe('The current mood of the user (e.g., happy, sad, excited).'),
  watchHistory: z.array(z.string()).describe('A list of anime titles the user has watched.'),
  profileActivity: z
    .string()
    .describe('A summary of the user profile activity (e.g., genres, ratings, favorite characters).'),
});
export type MoodBasedRecommendationsInput = z.infer<typeof MoodBasedRecommendationsInputSchema>;

const MoodBasedRecommendationsOutputSchema = z.object({
  animeRecommendations: z.array(
    z.object({
      title: z.string().describe('The title of the recommended anime.'),
      genre: z.array(z.string()).describe('The anime genres.'),
      releaseYear: z.number().describe('The anime release year.'),
      rating: z.number().describe('The anime rating.'),
      description: z.string().describe('The anime description.'),
      imageUrl: z.string().describe('The anime image URL.'),
    })
  ),
  mangaRecommendations: z.array(
    z.object({
      title: z.string().describe('The title of the recommended manga.'),
      genre: z.array(z.string()).describe('The manga genres.'),
      status: z.string().describe('The manga status.'),
      description: z.string().describe('The manga description.'),
      imageUrl: z.string().describe('The manga image URL.'),
    })
  ),
});
export type MoodBasedRecommendationsOutput = z.infer<typeof MoodBasedRecommendationsOutputSchema>;

export async function getMoodBasedRecommendations(
  input: MoodBasedRecommendationsInput
): Promise<MoodBasedRecommendationsOutput> {
  return moodBasedRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'moodBasedRecommendationsPrompt',
  input: {
    schema: z.object({
      mood: z.string().describe('The current mood of the user.'),
      watchHistory: z.array(z.string()).describe('A list of anime titles the user has watched.'),
      profileActivity: z.string().describe('A summary of the user profile activity.'),
    }),
  },
  output: {
    schema: z.object({
      animeRecommendations: z.array(
        z.object({
          title: z.string().describe('The title of the recommended anime.'),
          genre: z.array(z.string()).describe('The anime genres.'),
          releaseYear: z.number().describe('The anime release year.'),
          rating: z.number().describe('The anime rating.'),
          description: z.string().describe('The anime description.'),
          imageUrl: z.string().describe('The anime image URL.'),
        })
      ),
      mangaRecommendations: z.array(
        z.object({
          title: z.string().describe('The title of the recommended manga.'),
          genre: z.array(z.string()).describe('The manga genres.'),
          status: z.string().describe('The manga status.'),
          description: z.string().describe('The manga description.'),
          imageUrl: z.string().describe('The manga image URL.'),
        })
      ),
    }),
  },
  prompt: `Based on the user's current mood, watch history, and profile activity, recommend a list of anime and manga titles.

  Mood: {{{mood}}}
  Watch History: {{#each watchHistory}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  Profile Activity: {{{profileActivity}}}

  Consider the user's mood, watch history and profile activity to provide relevant and enjoyable recommendations.
  Return the results in a JSON format. Be sure to return valid JSON.
  `,
});

const moodBasedRecommendationsFlow = ai.defineFlow<
  typeof MoodBasedRecommendationsInputSchema,
  typeof MoodBasedRecommendationsOutputSchema
>(
  {
    name: 'moodBasedRecommendationsFlow',
    inputSchema: MoodBasedRecommendationsInputSchema,
    outputSchema: MoodBasedRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
